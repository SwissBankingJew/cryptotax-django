# Generated by Django 5.2.7 on 2025-10-22 08:26

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='WalletAnalysisOrder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('wallet_address', models.CharField(help_text='EVM wallet address (0x...)', max_length=42)),
                ('status', models.CharField(choices=[('pending_payment', 'Pending Payment'), ('payment_received', 'Payment Received'), ('processing', 'Processing'), ('completed', 'Completed'), ('partial_complete', 'Partially Complete'), ('failed', 'Failed')], db_index=True, default='pending_payment', max_length=20)),
                ('payment_amount_usd', models.DecimalField(decimal_places=2, default=50.0, max_digits=10, validators=[django.core.validators.MinValueValidator(50)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(help_text='User who created this order', on_delete=django.db.models.deletion.CASCADE, related_name='wallet_analysis_orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Wallet Analysis Order',
                'verbose_name_plural': 'Wallet Analysis Orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SolanaPayment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('payment_url', models.TextField(help_text='Full Solana Pay URL for payment')),
                ('reference', models.UUIDField(default=uuid.uuid4, help_text='Unique reference for tracking this payment on-chain', unique=True)),
                ('recipient_address', models.CharField(help_text='Solana wallet address to receive payment', max_length=44)),
                ('amount_expected', models.BigIntegerField(help_text='Expected amount in lamports (smallest unit)')),
                ('token_type', models.CharField(choices=[('USDC', 'USDC'), ('USDT', 'USDT')], default='USDC', help_text='SPL token type (USDC or USDT)', max_length=4)),
                ('token_mint', models.CharField(help_text='SPL token mint address', max_length=44)),
                ('transaction_signature', models.CharField(blank=True, help_text='Solana transaction signature (once paid)', max_length=88, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('finalized', 'Finalized'), ('failed', 'Failed')], db_index=True, default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('confirmed_at', models.DateTimeField(blank=True, help_text='When payment was confirmed on blockchain', null=True)),
                ('order', models.OneToOneField(help_text='Wallet analysis order for this payment', on_delete=django.db.models.deletion.CASCADE, related_name='solana_payment', to='wallet_analysis.walletanalysisorder')),
            ],
            options={
                'verbose_name': 'Solana Payment',
                'verbose_name_plural': 'Solana Payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReportFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file_name', models.CharField(help_text='Original filename', max_length=255)),
                ('file_path', models.CharField(help_text='Relative path from MEDIA_ROOT', max_length=500)),
                ('file_type', models.CharField(help_text='Report type (e.g., "defi_trades", "lp_events")', max_length=50)),
                ('file_size', models.BigIntegerField(help_text='File size in bytes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('order', models.ForeignKey(help_text='Order this report belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='report_files', to='wallet_analysis.walletanalysisorder')),
            ],
            options={
                'verbose_name': 'Report File',
                'verbose_name_plural': 'Report Files',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DuneQueryJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('query_name', models.CharField(help_text='Human-readable query name (e.g., "defi_trades", "lp_events")', max_length=100)),
                ('dune_query_id', models.IntegerField(help_text='Dune query ID from Dune Analytics')),
                ('dune_execution_id', models.CharField(blank=True, help_text='Execution ID returned by Dune API', max_length=100, null=True)),
                ('status', models.CharField(choices=[('queued', 'Queued'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('failed_needs_review', 'Failed - Needs Review')], db_index=True, default='queued', max_length=25)),
                ('error_message', models.TextField(blank=True, help_text='Error message if query failed', null=True)),
                ('error_type', models.CharField(blank=True, choices=[('query_error', 'Query Error'), ('network_error', 'Network Error'), ('rate_limit', 'Rate Limit'), ('service_outage', 'Service Outage'), ('auth_error', 'Authentication Error')], help_text='Categorized error type for retry decision', max_length=20, null=True)),
                ('retry_count', models.IntegerField(default=0, help_text='Number of manual retry attempts')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, help_text='When query execution started', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When query execution completed', null=True)),
                ('order', models.ForeignKey(help_text='Order this query belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='dune_query_jobs', to='wallet_analysis.walletanalysisorder')),
            ],
            options={
                'verbose_name': 'Dune Query Job',
                'verbose_name_plural': 'Dune Query Jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='walletanalysisorder',
            index=models.Index(fields=['-created_at'], name='wallet_anal_created_d28164_idx'),
        ),
        migrations.AddIndex(
            model_name='walletanalysisorder',
            index=models.Index(fields=['user', 'status'], name='wallet_anal_user_id_b54fdf_idx'),
        ),
        migrations.AddIndex(
            model_name='solanapayment',
            index=models.Index(fields=['status', '-created_at'], name='wallet_anal_status_2f58a2_idx'),
        ),
        migrations.AddIndex(
            model_name='solanapayment',
            index=models.Index(fields=['reference'], name='wallet_anal_referen_4fcab5_idx'),
        ),
        migrations.AddIndex(
            model_name='reportfile',
            index=models.Index(fields=['order', '-created_at'], name='wallet_anal_order_i_bc420b_idx'),
        ),
        migrations.AddIndex(
            model_name='dunequeryjob',
            index=models.Index(fields=['order', 'status'], name='wallet_anal_order_i_86517d_idx'),
        ),
        migrations.AddIndex(
            model_name='dunequeryjob',
            index=models.Index(fields=['status', '-created_at'], name='wallet_anal_status_5c0d0e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dunequeryjob',
            unique_together={('order', 'query_name')},
        ),
    ]
