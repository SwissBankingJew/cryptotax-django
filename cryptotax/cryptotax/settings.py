"""
Django settings for cryptotax project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-3cc6es*m#l=$wd!=c4#a%o0@%x0##3=%yw*f^ej7p%3x5@qf3w')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'true').lower() in {'1', 'true', 'yes', 'on'}

ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS if host.strip()]

CSRF_TRUSTED_ORIGINS = [
    origin.strip()
    for origin in os.getenv('DJANGO_CSRF_TRUSTED_ORIGINS', '').split(',')
    if origin.strip()
]

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_q',
    'wallet_analysis.apps.WalletAnalysisConfig'
]

# django-allauth configuration
SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Development email backend; replace in production
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Account behavior (new-style allauth settings)
ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]
ACCOUNT_EMAIL_VERIFICATION = 'none'

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cryptotax.urls'

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACKS = "bootstrap5"
STATICFILES_DIRS = [
    BASE_DIR / "static"
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cryptotax.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# Project-level static directory for assets like css/app.css
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django Q2 Configuration
# Uses SQLite as the queue backend (no Redis needed)
Q_CLUSTER = {
    'name': 'cryptotax_queue',
    'workers': 2,
    'timeout': 10800,  # 35 minutes max per task (Dune queries can take up to 30 min)
    'retry': 240100,  # Retry failed tasks after 40 minutes
    'queue_limit': 50,
    'bulk': 10,
    'orm': 'default',  # Use default database (SQLite) as queue
}

# Media files (user uploads and generated reports)
MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = '/media/'

# Solana Configuration
SOLANA_NETWORK = os.getenv('SOLANA_NETWORK', 'mainnet')  # 'mainnet' or 'devnet'

# Network-specific RPC URLs
SOLANA_MAINNET_RPC_URL = os.getenv('SOLANA_MAINNET_RPC_URL', 'https://api.mainnet-beta.solana.com')
SOLANA_DEVNET_RPC_URL = os.getenv('SOLANA_DEVNET_RPC_URL', 'https://api.devnet.solana.com')

# Select RPC URL based on network
SOLANA_RPC_URL = SOLANA_MAINNET_RPC_URL if SOLANA_NETWORK == 'mainnet' else SOLANA_DEVNET_RPC_URL

# Recipient addresses (can be different for devnet testing)
SOLANA_MAINNET_RECIPIENT = os.getenv('SOLANA_RECIPIENT_ADDRESS')
SOLANA_DEVNET_RECIPIENT = os.getenv('SOLANA_DEVNET_RECIPIENT', SOLANA_MAINNET_RECIPIENT)
SOLANA_RECIPIENT_ADDRESS = SOLANA_MAINNET_RECIPIENT if SOLANA_NETWORK == 'mainnet' else SOLANA_DEVNET_RECIPIENT

# SPL Token mint addresses for USDC and USDT
# Mainnet token mints
USDC_MINT_MAINNET = 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'
USDT_MINT_MAINNET = 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB'

# Devnet token mints (different from mainnet!)
USDC_MINT_DEVNET = 'Gh9ZwEmdLJ8DscKNTkTqPbNwLNNBjuSzaG9Vp2KGtKJr'  # Devnet USDC
USDT_MINT_DEVNET = 'EJwZgeZrdC8TXTQbQBoL6bfuAnFUUy1PVCMB4DYPzVaS'  # Devnet USDT (or use same as USDC for testing)

# Select mints based on network
USDC_MINT = USDC_MINT_MAINNET if SOLANA_NETWORK == 'mainnet' else USDC_MINT_DEVNET
USDT_MINT = USDT_MINT_MAINNET if SOLANA_NETWORK == 'mainnet' else USDT_MINT_DEVNET

# Dune Analytics Configuration
DUNE_API_KEY = os.getenv('DUNE_API_KEY')

# Dune Query IDs for different report types
DUNE_QUERY_DEFI_TRADES = os.getenv('DUNE_QUERY_DEFI_TRADES')  # DeFi trades/swaps
DUNE_QUERY_LP_EVENTS = os.getenv('DUNE_QUERY_LP_EVENTS')  # LP/staking events
DUNE_QUERY_NFT_TRANSACTIONS = os.getenv('DUNE_QUERY_NFT_TRANSACTIONS')  # NFT transactions
DUNE_QUERY_TOKEN_TRANSFERS = os.getenv('DUNE_QUERY_TOKEN_TRANSFERS')  # Token transfers

# Map query types to their IDs
DUNE_QUERIES = {
    'defi_trades': DUNE_QUERY_DEFI_TRADES,
    'lp_events': DUNE_QUERY_LP_EVENTS,
    'nft_transactions': DUNE_QUERY_NFT_TRANSACTIONS,
    'token_transfers': DUNE_QUERY_TOKEN_TRANSFERS,
}
